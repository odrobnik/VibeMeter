import XCTest
@testable import VibeMeter

// MARK: - Modern API Client Tests using Swift 6 patterns

@MainActor
final class CursorAPIClientTests: XCTestCase {
    
    // MARK: - Properties
    
    private var apiClient: CursorAPIClient!
    private var mockURLSession: MockURLSession!
    private var mockSettingsManager: MockSettingsManager!
    
    // MARK: - Setup & Teardown
    
    override func setUp() async throws {
        try await super.setUp()
        
        mockURLSession = MockURLSession()
        mockSettingsManager = MockSettingsManager()
        apiClient = CursorAPIClient(
            urlSession: mockURLSession,
            settingsManager: mockSettingsManager
        )
    }
    
    override func tearDown() async throws {
        apiClient = nil
        mockURLSession = nil
        mockSettingsManager = nil
        
        try await super.tearDown()
    }
    
    // MARK: - Team Info Tests
    
    func testFetchTeamInfoSuccess() async throws {
        // Given
        let expectedTeam = TeamInfo(id: 123, name: "Test Team")
        let responseData = """
        {
            "teams": [{
                "id": 123,
                "name": "Test Team"
            }]
        }
        """.data(using: .utf8)!
        
        mockURLSession.data = responseData
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/teams")!,
            statusCode: 200,
            httpVersion: nil,
            headerFields: nil
        )
        
        // When
        let teamInfo = try await apiClient.fetchTeamInfo(authToken: "test-token")
        
        // Then
        XCTAssertEqual(teamInfo, expectedTeam)
        XCTAssertEqual(mockURLSession.lastRequest?.value(forHTTPHeaderField: "Authorization"), "Bearer test-token")
    }
    
    func testFetchTeamInfoNoTeams() async throws {
        // Given
        let responseData = """
        {
            "teams": []
        }
        """.data(using: .utf8)!
        
        mockURLSession.data = responseData
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/teams")!,
            statusCode: 200,
            httpVersion: nil,
            headerFields: nil
        )
        
        // When/Then
        do {
            _ = try await apiClient.fetchTeamInfo(authToken: "test-token")
            XCTFail("Expected error but got success")
        } catch CursorAPIError.noTeamFound {
            // Expected error
        } catch {
            XCTFail("Unexpected error: \(error)")
        }
    }
    
    // MARK: - User Info Tests
    
    func testFetchUserInfoSuccess() async throws {
        // Given
        let expectedUser = UserInfo(email: "test@example.com", teamId: 456)
        let responseData = """
        {
            "email": "test@example.com",
            "team_id": 456
        }
        """.data(using: .utf8)!
        
        mockURLSession.data = responseData
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/me")!,
            statusCode: 200,
            httpVersion: nil,
            headerFields: nil
        )
        
        // When
        let userInfo = try await apiClient.fetchUserInfo(authToken: "test-token")
        
        // Then
        XCTAssertEqual(userInfo, expectedUser)
    }
    
    // MARK: - Invoice Tests
    
    func testFetchMonthlyInvoiceSuccess() async throws {
        // Given
        mockSettingsManager.teamId = 789
        
        let expectedInvoice = MonthlyInvoice(
            items: [
                InvoiceItem(cents: 1000, description: "Usage 1"),
                InvoiceItem(cents: 2000, description: "Usage 2")
            ],
            pricingDescription: PricingDescription(
                description: "Pro Plan",
                id: "pro-123"
            )
        )
        
        let responseData = """
        {
            "items": [
                {"cents": 1000, "description": "Usage 1"},
                {"cents": 2000, "description": "Usage 2"}
            ],
            "pricing_description": {
                "description": "Pro Plan",
                "id": "pro-123"
            }
        }
        """.data(using: .utf8)!
        
        mockURLSession.data = responseData
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/usage-by-model/get-team-month")!,
            statusCode: 200,
            httpVersion: nil,
            headerFields: nil
        )
        
        // When
        let invoice = try await apiClient.fetchMonthlyInvoice(
            authToken: "test-token",
            month: 4,
            year: 2024
        )
        
        // Then
        XCTAssertEqual(invoice, expectedInvoice)
        XCTAssertEqual(invoice.totalSpendingCents, 3000)
        
        // Verify query parameters
        let url = mockURLSession.lastRequest?.url
        XCTAssertNotNil(url)
        XCTAssertTrue(url?.absoluteString.contains("month=4") ?? false)
        XCTAssertTrue(url?.absoluteString.contains("year=2024") ?? false)
        XCTAssertTrue(url?.absoluteString.contains("teamId=789") ?? false)
    }
    
    func testFetchMonthlyInvoiceNoTeamId() async throws {
        // Given
        mockSettingsManager.teamId = nil
        
        // When/Then
        do {
            _ = try await apiClient.fetchMonthlyInvoice(
                authToken: "test-token",
                month: 4,
                year: 2024
            )
            XCTFail("Expected error but got success")
        } catch CursorAPIError.teamIdNotSet {
            // Expected error
        } catch {
            XCTFail("Unexpected error: \(error)")
        }
    }
    
    // MARK: - Error Handling Tests
    
    func testHandleUnauthorizedResponse() async throws {
        // Given
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/me")!,
            statusCode: 401,
            httpVersion: nil,
            headerFields: nil
        )
        mockURLSession.data = Data()
        
        // When/Then
        do {
            _ = try await apiClient.fetchUserInfo(authToken: "invalid-token")
            XCTFail("Expected error but got success")
        } catch CursorAPIError.unauthorized {
            // Expected error
        } catch {
            XCTFail("Unexpected error: \(error)")
        }
    }
    
    func testHandleNetworkError() async throws {
        // Given
        mockURLSession.error = URLError(.notConnectedToInternet)
        
        // When/Then
        do {
            _ = try await apiClient.fetchUserInfo(authToken: "test-token")
            XCTFail("Expected error but got success")
        } catch CursorAPIError.networkError(let message, _) {
            XCTAssertTrue(message.contains("notConnectedToInternet"))
        } catch {
            XCTFail("Unexpected error: \(error)")
        }
    }
    
    func testHandleDecodingError() async throws {
        // Given
        let invalidJSON = "{ invalid json }".data(using: .utf8)!
        mockURLSession.data = invalidJSON
        mockURLSession.response = HTTPURLResponse(
            url: URL(string: "https://www.cursor.com/api/me")!,
            statusCode: 200,
            httpVersion: nil,
            headerFields: nil
        )
        
        // When/Then
        do {
            _ = try await apiClient.fetchUserInfo(authToken: "test-token")
            XCTFail("Expected error but got success")
        } catch CursorAPIError.decodingError {
            // Expected error
        } catch {
            XCTFail("Unexpected error: \(error)")
        }
    }
}

// MARK: - Mock Settings Manager

private final class MockSettingsManager: SettingsManagerProtocol {
    var teamId: Int?
    var teamName: String?
    var userEmail: String?
    var selectedCurrencyCode = "USD"
    var refreshIntervalMinutes = 15
    var warningLimitUSD = 200.0
    var upperLimitUSD = 1000.0
    var launchAtLoginEnabled = false
    
    func clearUserSessionData() {
        teamId = nil
        teamName = nil
        userEmail = nil
    }
}